{"version":3,"sources":["util.js","Libs/AccountingJs.js","Libs/CurrencyJs.js","Libs/CurrencyFormatterJs.js","Libs/DineroJs.js","Libs/NumbroJs.js","Libs/NumeralJs.js","Libs/ReactIntl.js","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","inherits","createClass","key","value","react_default","a","createElement","children","error","React","Component","formattedLocale","locale","splitLocale","split","toUpperCase","AccountingJs","name","size","notes","formatter","_ref","currency","amount","window","accounting","formatMoney","AUD","symbol","precision","thousand","format","pos","neg","zero","GBP","CAD","EUR","HKD","NZD","SEK","CHF","USD","CJS","formatted","currencyJs","decimal","separator","CurrencyFormatterJs","currencyFormatter","code","e","DineroJs","dinero","setLocale","toFormat","values","numbrolanguages","forEach","data","numbro","registerLanguage","NumbroJs","setLanguage","formatCurrency","thousandSeparated","mantissa","NumeralJs","numeral","addLocaleData","concat","toConsumableArray","en","se","de","es","ReactIntl","index_es","style","Header","formatters","currencies","locales","DoSomeJunk","_ref2","sourceOTruth","ReactDOMServer","renderToStaticMarkup","all","map","className","b","formattedText","canonical","trim","replace","util_ErrorBoundary","textAlign","whiteSpace","Fragment","App","_ref3","span","background","fontWeight","App_DoSomeJunk","Foo","_useState","useState","_useState2","slicedToArray","onChange","evt","target","App_App","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b9b0f31.chunk.js","sourcesContent":["import React from 'react';\n\nexport class ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false };\n    }\n    static getDerivedStateFromError(error) {\n      return { hasError: true };\n    }\n    render() {\n      if (this.state.hasError) {\n        return <span>Error!</span>;\n      }\n      return this.props.children;\n    }\n  }\n  \n  export const formattedLocale = locale => {\n    const splitLocale = locale.split('-')\n    return splitLocale[0] + (\n      splitLocale[1] ? ('-' + locale.split('-')[1].toUpperCase()) : '')\n  };\n  \n  export const stringEquals = (a, b) => (\n    a.replace(/\\xa0/g, ' ').replace(/\\s/g, '') ===\n    b.replace(/\\xa0/g, ' ').replace(/\\s/g, ''));\n  \n  ","import React from 'react';\n\n\nexport const AccountingJs = {\n    name: 'Accounting.js',\n    size: '2.2KB',\n    notes:\n`no npm package;\nmanual formatting (user supplies symbol, e.g.);\ndifficult/manual to localize;\nrequires (locale*currency) handwritten formatters`,\n    formatter: ({ locale, currency, amount }) => {\n        const formatTable = {\n            'AUD': { symbol: 'A$', precision: 2, thousand: ',', format: { pos: '%s %v', neg: '%s (%v)', zero: '%s  --' } },\n            'GBP': { symbol: '£', precision: 2, thousand: ',', format: { pos: '%s %v', neg: '%s (%v)', zero: '%s  --' } },\n            'CAD': { symbol: '$', precision: 2, thousand: ',', format: { pos: '%s %v', neg: '%s (%v)', zero: '%s  --' } },\n            'EUR': { symbol: '€', precision: 2, thousand: ',', format: { pos: '%s %v', neg: '%s (%v)', zero: '%s  --' } },\n            'HKD': { symbol: 'HK$', precision: 2, thousand: ',', format: { pos: '%s %v', neg: '%s (%v)', zero: '%s  --' } },\n            'NZD': { symbol: 'NZ$', precision: 2, thousand: ',', format: { pos: '%s %v', neg: '%s (%v)', zero: '%s  --' } },\n            'SEK': { symbol: 'SEK\\xa0', precision: 2, thousand: ',', format: { pos: '%s %v', neg: '%s (%v)', zero: '%s  --' } },\n            'CHF': { symbol: 'CHF\\xa0', precision: 2, thousand: ',', format: { pos: '%s %v', neg: '%s (%v)', zero: '%s  --' } },\n            'USD': { symbol: '$', precision: 2, thousand: ',', format: { pos: '%s %v', neg: '%s (%v)', zero: '%s  --' } },\n        }\n        return <span>{window.accounting.formatMoney(amount, formatTable[currency])}</span>;\n    }\n}\n","import React from 'react';\n\nimport currencyJs from 'currency.js';\n\n// currency.js\nexport const CJS = {\n    name: 'currency.js',\n    size: '3.2KB',\n    notes: \n`Developer must define localization formats;\nrequires (locale*currency) handwritten formatters`,\n    formatter: ({ locale, currency, amount }) => {\n        const formatted = ({\n            'AUD': value => currencyJs(value, { symbol: 'A$', decimal: '.', separator: ',' }),\n            'GBP': value => currencyJs(value, { symbol: '£', decimal: '.', separator: ',' }),\n            'CAD': value => currencyJs(value, { symbol: '$', decimal: '.', separator: ',' }),\n            'EUR': value => currencyJs(value, { symbol: '€', decimal: '.', separator: ',' }),\n            'HKD': value => currencyJs(value, { symbol: 'HK$', decimal: '.', separator: ',' }),\n            'NZD': value => currencyJs(value, { symbol: 'NZ$', decimal: '.', separator: ',' }),\n            'SEK': value => currencyJs(value, { symbol: 'SEK\\xa0', decimal: '.', separator: ',' }),\n            'CHF': value => currencyJs(value, { symbol: 'CHF\\xa0', decimal: '.', separator: ',' }),\n            'USD': value => currencyJs(value, { symbol: '$', decimal: '.', separator: ',' }),\n        })[currency](amount).format(true);\n        return <span>{formatted}</span>;\n    }\n}","import React from 'react';\n\nimport currencyFormatter from 'currency-formatter';\n\nexport const CurrencyFormatterJs = {\n    name: 'currency-formatter',\n    size: '',\n    notes:\n`specifically says not to use this library, and to use the Intl API instead;\nIncorrect formatting\nTies currency to language/locale`,\n    formatter: ({ locale, currency, amount }) => {\n        let formatted;\n        try {\n            formatted = currencyFormatter.format(amount, { code: currency });\n        } catch (e) {\n            formatted = 'ERROR!';\n        }\n        return <span>{formatted}</span>\n    }\n}\n","import React from 'react';\n\nimport dinero from 'dinero.js';\n\nimport { formattedLocale } from '../util';\n\nexport const DineroJs = {\n  name: 'Dinero.js',\n  size: '9.8KB',\n  notes: \n`Uses same internationalization we already use... has the same issue;\nalso requires developer specify number formatting rules (e.g. separator character), so in some ways provides less functionality/places a larger burden on the developer/user (more room for bugs, larger maintenance burden);\n(potentially) requires (locale*currency) handwritten formatters.`,\n  formatter: ({ locale, currency, amount }) => {\n    return <span>{dinero({ amount: amount * 100, currency: currency, precision: 2 })\n      .setLocale(formattedLocale(locale))\n      .toFormat('$0,0.00')}</span>\n  }\n}","import React from 'react';\nimport numbrolanguages from 'numbro/dist/languages.min.js'\n\nimport numbro from 'numbro';\n\nimport { formattedLocale } from '../util';\n\nObject.values(numbrolanguages).forEach(function (data) {\n    numbro.registerLanguage(data);\n})\nexport const NumbroJs = {\n    name: 'numbro',\n    size: '41.7KB/141KB',\n    notes:\n`non-exhaustive list of supported languages (e.g. no en-ca);\nbadly designed API/difficult to use;\nTies currency to language/locale;\nWeird API (formatting configuration requires mutating global state)`,\n    formatter: ({ locale, currency, amount }) => {\n        const localeTable = {\n            'AUD': 'en-AU',\n            'GBP': 'en-GB',\n            'CAD': 'en-CA',\n            'EUR': 'de-DE',\n            'HKD': 'zh-HK',\n            'NZD': 'en-NZ',\n            'SEK': 'sv-SE',\n            'CHF': 'fr-CH',\n            'USD': 'en-US',\n        }\n        numbro.setLanguage(formattedLocale(localeTable[currency]));\n        return <span>{numbro(amount).formatCurrency({\n            thousandSeparated: true,\n            mantissa: 2,\n        })}</span>;\n    }\n}","import React from 'react';\nimport numeral from 'numeral';\n\n// import numeral_en from 'numeral/locales/en' // <- these don't exist\n// import numeral_se from 'numeral/locales/se' // <- these don't exist\nimport numeral_de from 'numeral/locales/de'\nimport numeral_es from 'numeral/locales/es'\nimport numeral_fr from 'numeral/locales/fr'\n\nimport numeral_en_au from 'numeral/locales/en-au'\nimport numeral_en_gb from 'numeral/locales/en-gb'\nimport numeral_fr_ca from 'numeral/locales/fr-ca'\nimport numeral_fr_ch from 'numeral/locales/fr-ch'\n\n\nexport const NumeralJs = {\n  name: 'numeral',\n  size: '12.2KB/19.8KB',\n  notes:\n`formatting is extremely manual;\nlimited locales available (can be extended though);\nTies currency to language/locale;\nWeird string based formatting DSL;\nDoesn't localize formatting (requires developer to supply correct format string for given locale);\nWeird API (formatting configuration requires mutating global state);\n34 locales`,\n  formatter: ({ locale, currency, amount }) => {\n    const localeTable = {\n      'AUD': 'en-au',\n      'GBP': 'en-gb',\n      'CAD': 'fr-ca',\n      'EUR': 'de',\n      'HKD': 'NOPE',\n      'NZD': 'NOPE',\n      'SEK': 'NOPE',\n      'CHF': 'fr-ch',\n      'USD': 'NOPE',\n  }\n    numeral.locale(localeTable[currency]);\n    let formatted;\n    try {\n      formatted = numeral(amount).format('0,0.00$');\n    } catch (e) {\n      formatted = 'ERROR!';\n    }\n    return <span>{formatted}</span>;\n  }\n}","import React from 'react';\n\nimport { FormattedNumber, addLocaleData } from 'react-intl'\n\nimport en from 'react-intl/locale-data/en'\nimport se from 'react-intl/locale-data/se'\nimport de from 'react-intl/locale-data/de'\nimport es from 'react-intl/locale-data/es'\nimport fr from 'react-intl/locale-data/fr'\n\naddLocaleData([\n    ...en,\n    ...se,\n    ...de,\n    ...es,\n]);\n\nexport const ReactIntl = {\n    name: 'ReactIntl',\n    formatter: ({ locale, currency, amount }) =>\n        <FormattedNumber locale={locale} style=\"currency\" currency={currency} value={amount} />\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport ReactDOMServer from 'react-dom/server';\n\nimport { IntlProvider } from 'react-intl'\n\nimport { ErrorBoundary, stringEquals } from './util';\n\nimport { AccountingJs } from './Libs/AccountingJs';\nimport { CJS } from './Libs/CurrencyJs';\nimport { CurrencyFormatterJs } from './Libs/CurrencyFormatterJs';\nimport { DineroJs } from './Libs/DineroJs';\nimport { NumbroJs } from './Libs/NumbroJs';\nimport { NumeralJs } from './Libs/NumeralJs';\nimport { ReactIntl } from './Libs/ReactIntl';\n\nconst Header = {\n  name: 'locale/currency',\n  formatter: ({ locale, currency, amount }) =>\n    <span>{locale} - {currency}</span>\n}\n\nconst formatters = [\n  Header,\n  ReactIntl,\n  AccountingJs,\n  CJS,\n  CurrencyFormatterJs,\n  DineroJs,\n  NumbroJs,\n  NumeralJs,\n];\n\nconst currencies = [\n  'AUD',\n  'GBP',\n  'CAD',\n  'EUR',\n  'HKD',\n  'NZD',\n  'SEK',\n  'CHF',\n  'USD',\n];\n\nconst locales = [\n  'de-de',\n  'en-us',\n  'en-au',\n  'en-ch',\n  'se',\n  'en-ca',\n  'en-gb',\n  'en-hk',\n  'en-nz',\n  'es-es',\n  'en-se',\n  'se-sv',\n  'es-us',\n]\n\n\nconst DoSomeJunk = ({ locale }) => {\n  const amount = 12345.67;\n  const sourceOTruth = {}; // Used to quickly check format options for correctness\n  currencies.forEach(currency => {\n    sourceOTruth[locale + currency] = ReactDOMServer.renderToStaticMarkup(<IntlProvider locale={locale}><ReactIntl.formatter locale={locale} currency={currency} amount={amount} /></IntlProvider>)\n  })\n  const all = (\n    formatters.map(formatter =>\n      <tr key={formatter.name}>\n        <td className=\"name\">{formatter.name}</td>\n        <td className=\"name\">{formatter.size}</td>\n        {currencies.map(currency => {\n          const formatted = <formatter.formatter locale={locale} currency={currency} amount={amount} />;\n          const formattedText = ReactDOMServer.renderToStaticMarkup(<IntlProvider locale={locale}>{formatted}</IntlProvider>);\n          const canonical = sourceOTruth[locale + currency];\n          let className = '';\n          if (canonical) {\n            className = formatter === Header || stringEquals(formattedText.trim(), canonical.trim()) ? \"\" : \"mismatch\";\n          }\n          return (\n            <ErrorBoundary key={locale + currency}>\n              <td className={className}>{formatted}</td>\n            </ErrorBoundary>\n          );\n        })}\n        <td className=\"name\" style={{ textAlign: 'left', whiteSpace: 'pre' }}>{formatter.notes}</td>\n      </tr>\n    )\n  );\n  return <React.Fragment>{all}</React.Fragment>\n}\n\nconst App = ({ locale }) => {\n  return (\n    <div>\n      <table>\n        <colgroup>\n          <col span=\"1\" style={{ background: \"gray\", fontWeight: 'bold' }} />\n          <col span=\"1\" style={{ background: \"gray\", fontWeight: 'bold' }} />\n        </colgroup>\n        <tbody>\n          <DoSomeJunk locale={locale} />\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction Foo() {\n  const [locale, setLocale] = useState('de-de');\n  return (\n    <div className=\"App\">\n      <select onChange={evt => setLocale(evt.target.value)}>\n        {locales.map(locale =>\n          <option\n            key={locale}\n            value={locale.split('-')[0]}\n          >\n            {locale}\n          </option>)}\n      </select>\n      <IntlProvider locale={locale} key={locale}>\n        <App locale={locale} />\n      </IntlProvider>\n    </div>\n  );\n}\n\nexport default Foo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}